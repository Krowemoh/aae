*
* COMPILER DIRECTIVES
*
    $DEFINE DATABASE.UV
    $DEFINE PLATFORM.LINUX
*
*ASI********************************************************************
*                                                                      *
* Copyright 2022 - Asynchron Systems Inc.                              *
*                                                                      *
* THIS PROGRAM IS THE EXCLUSIVE PROPERTY OF ASYNCHRON SYSTEMS INC. IT  *
* MAY NOT BE USED, SOLD, DISTRIBUTED OR REPRODUCED BY ANY MEANS WITHOUT*
* THE EXPRESS WRITTEN CONSENT OF ASYNCHRON SYSTEMS INC.                *
*                                                                      *
* Create Date  Req#  Who  Description                                  *
* 16 JUN 2022  N/A   NT   v0.1                                         *
*                                                                      *
************************************************************************
* Special Instructions                                                 *
*                                                                      *
************************************************************************
* Change History                                                       *
*                                                                      *
* Change Date  Req#  Who  Description                                  *
*
************************************************************************
*
*%BEGIN
    EQU TRUE TO 1
    EQU FALSE TO 0
*
* CURSOR CONTROLS & SPECIAL CHARACTERS:
*
    EQU UP TO CHAR(26)
    EQU DOWN TO CHAR(10)
    EQU LEFT TO CHAR(8)
    EQU RIGHT TO CHAR(6)
    BOTTOM = @(0,23)
    CLEAR.SCREEN = @(-1)
    CLEAR.REST.OF.SCREEN = @(-3)
    CLEAR.REST.OF.LINE = @(-4)
    CLEAR.LINE = @(0) : CLEAR.REST.OF.LINE
    ERROR.POSITION = BOTTOM : CLEAR.REST.OF.SCREEN
    EQU BELL TO CHAR(7)
*
    EQU ATTRIBUTE.MARK TO CHAR(254)
    EQU VALUE.MARK TO CHAR(253)
    EQU SUB.VALUE.MARK TO CHAR(252)
    EQU TEXT.MARK TO CHAR(251)
*
* FETCH ROUTINE RETURN STATUS DEFINITIONS:
*
    EQU NORMAL TO 1
    EQU PREVIOUS.FIELD TO 2
    EQU CANCEL TO 3
    EQU LIST TO 4
    EQU REPAINT TO 5
    EQU TAB TO 6
    EQU HELP.REQUEST TO 10
*
*OLD EQU SLAVE.ON TO CHAR(18)
*OLD EQU SLAVE.OFF TO CHAR(20)
*
* WINDOWS ROUTINES ERROR CODES:
*
    EQU WIN.FILE.NOT.FOUND TO 1
    EQU WIN.ITEM.NOT.FOUND TO 1000
*
    @USER1 = 'AAE'
    @USER2 = 'AAE'
*
*%END
*
    PROMPT ''
    TAB.SIZE = 4
*
    TOKENS = SENTENCE()
    NUMBER.OF.ARGUMENTS = DCOUNT(TOKENS,' ')
*
    IF NUMBER.OF.ARGUMENTS = 3 THEN
        FILENAME = FIELD(TOKENS,' ',2)
*
        IF FILENAME = '' THEN
            PRINT 'Missing Filename - Press Return':
            INPUT ANYTHING
            STOP
        END
*
        OPEN '',FILENAME TO FILE ELSE
            PRINT 'Unable to open file: ' : FILENAME : ' - Press RETURN':
            INPUT ANYTHING
            STOP
        END
*
        RECORD.ID = FIELD(TOKENS,' ',3)
*
    END ELSE IF NUMBER.OF.ARGUMENTS = 4 THEN
        FILENAME = FIELD(TOKENS,' ',3)
*
        IF FILENAME = '' THEN
            PRINT 'Missing Filename - Press Return':
            INPUT ANYTHING
            STOP
        END
*
        OPEN 'DICT',FILENAME TO FILE ELSE
            PRINT 'Unable to open file: ' : FILENAME : ' - Press RETURN':
            INPUT ANYTHING
            STOP
        END
*
        RECORD.ID = FIELD(TOKENS,' ',4)
    END
*
    OPEN '','MD' TO MD.FILE ELSE
        PRINT 'Unable to open file:  - Press RETURN':
        INPUT ANYTHING
        STOP
    END
*
* SET FILETYPE
*
    READ ANYTHING FROM MD.FILE,FILENAME:'.O' THEN
        FILETYPE = 'BASIC'
    END ELSE IF FILENAME = 'BP' OR FILENAME = 'MPROCLIB' THEN
        FILETYPE = 'BASIC'
    END ELSE IF LINES<1> = 'PQ' THEN
        FILETYPE = 'PROC'
    END ELSE
        FILETYPE = 'DATA'
    END
*
    ARCHIVE.FILENAME = 'ARCHIVE-' : FILENAME
    ARCHIVE.OPENED = FALSE
    OPEN '', ARCHIVE.FILENAME TO ARCHIVE.FILE THEN
        ARCHIVE.OPENED = TRUE
    END
*
    IF RECORD.ID = '' THEN
        PRINT 'Missing record id - Press Return':
        INPUT ANYTHING
        STOP
    END
*
    READU LINES FROM FILE,RECORD.ID LOCKED
        PRINT RECORD.ID : ' is locked.'
        STOP
*
    END THEN
        TOTAL.LINES = DCOUNT(LINES,@AM)
        PRINT 'Opened ' : RECORD.ID : '.'
        PRINT TOTAL.LINES : ' lines/fields in this record.'
        PRINT
*
    END ELSE
        PRINT 'New record.'
        PRINT
        LINES = ''
    END
*
    UP.CARET.MODE = FALSE
    ORIGINAL.LINES = LINES
*
    CURRENT.LINE = 0
    CURRENT.LINE.STACK = ''
    ITEM.STACK = ''
    NEST.LEVEL = 0
*
    HISTORY = ''
    HISTORY.POS = 1
    HISTORY.COMMENTS = ''
*
    LINES.DISPLAY = 30
*
    DONE = FALSE
    VALUE = ''
*
    LOOP WHILE TRUE DO
        TOTAL.LINES = DCOUNT(LINES,@AM)
        PROMPT.LENGTH = LEN(TOTAL.LINES)
        IF PROMPT.LENGTH < 4 THEN
            PROMPT.LENGTH = 4
        END
        PADDING = 'R#' : PROMPT.LENGTH : ':'
        PADDING.INSERT = 'R#' : PROMPT.LENGTH : '= '
*
        PRINT '*---: ' :
        INPUT VALUE
*
        BEGIN CASE
            CASE VALUE = ''
                CURRENT.LINE = CURRENT.LINE + 1
                IF CURRENT.LINE > TOTAL.LINES THEN
                    CURRENT.LINE = TOTAL.LINES
                END
                PRINT CURRENT.LINE PADDING : ' ' : LINES<CURRENT.LINE>
*
            CASE NUM(VALUE)
                CURRENT.LINE = VALUE
                IF CURRENT.LINE > TOTAL.LINES THEN
                    CURRENT.LINE = TOTAL.LINES
                END
*
                LINE = LINES<CURRENT.LINE>
*
                IF UP.CARET.MODE THEN
                    FOR CHAR.CTR = 0 TO 9
                        LINE = CHANGE(LINE,CHAR(CHAR.CTR),'^00':CHAR.CTR)
                    NEXT CHAR.CTR
*
                    FOR CHAR.CTR = 10 TO 31
                        LINE = CHANGE(LINE,CHAR(CHAR.CTR),'^0':CHAR.CTR)
                    NEXT CHAR.CTR
*
                    FOR CHAR.CTR = 127 TO 253
                        LINE = CHANGE(LINE,CHAR(CHAR.CTR),'^':CHAR.CTR)
                    NEXT CHAR.CTR
                END
*
                PRINT CURRENT.LINE PADDING : ' ' : LINE
*
            CASE OCONV(VALUE,'MCU') = 'FORMAT'
                GOSUB FORMAT.FILE
                PRINT 'Formatted file.'
*
            CASE OCONV(VALUE,'MCU') = 'ARCHIVE'
                IF ARCHIVE.OPENED THEN
                    ARCHIVE.DATE = OCONV(DATE(),'D')
                    CONVERT ' ' TO '' IN ARCHIVE.DATE
*
                    ID.OK = FALSE
                    SEQ = 0
                    LOOP
                        $IFDEF DATABASE.UV
                            ARCHIVE.ID = ARCHIVE.DATE : '*' : RECORD.ID
                        $ENDIF
                        $IFDEF DATABASE.D3
                            ARCHIVE.ID = FILENAME : '*' : ARCHIVE.DATE : '*' : RECORD.ID
                        $ENDIF
                        IF SEQ # 0 THEN ARCHIVE.ID = ARCHIVE.ID : '*' : SEQ
                        READV ANYTHING FROM ARCHIVE.FILE, ARCHIVE.ID, 1 ELSE ID.OK = TRUE
                    UNTIL ID.OK DO
                        SEQ = SEQ + 1
                    REPEAT
*
                    WRITE LINES ON ARCHIVE.FILE, ARCHIVE.ID
*
                    PRINT 'Archived in ' : ARCHIVE.FILENAME : ' as ' : ARCHIVE.ID :'.'
*
                END ELSE
                    PRINT 'Unable to archive.'
                END
*
            CASE OCONV(VALUE,'MCU')[1,4] = 'LOAD'
                FILE.TYPE = ''
                NUMBER.OF.ARGUMENTS = DCOUNT(VALUE,' ')
*
                IF NUMBER.OF.ARGUMENTS = 2 THEN
                    LOAD.FILENAME = FILENAME
                    LOAD.RECORD.ID = FIELD(VALUE,' ',2)
*
                END ELSE IF NUMBER.OF.ARGUMENTS = 3 THEN
                    LOAD.FILENAME = FIELD(VALUE,' ',2)
                    LOAD.RECORD.ID = FIELD(VALUE,' ',3)
*
                END ELSE IF NUMBER.OF.ARGUMENTS = 4 THEN
                    LOAD.FILENAME = FIELD(VALUE,' ',3)
                    LOAD.RECORD.ID = FIELD(VALUE,' ',4)
                    FILE.TYPE = 'DICT'
                END
*
                OPEN FILE.TYPE,LOAD.FILENAME TO LOAD.FILE THEN
                    READ LOAD.ITEM FROM LOAD.FILE,LOAD.RECORD.ID THEN
                        PRINT 'Starting line/field number: ' :
                        INPUT LOAD.START
                        PRINT 'Ending line/field number: ' :
                        INPUT LOAD.END
*
                        LOAD.LENGTH = DCOUNT(LOAD.ITEM,@AM)
                        IF LOAD.LENGTH < LOAD.END THEN
                            LOAD.END = LOAD.LENGTH
                        END
                        IF LOAD.END < LOAD.START THEN
                            LOAD.END = LOAD.START
                        END
*
                        IF TOTAL.LINES = 0 THEN
                            INSERT.AT.LINE = 1
                        END ELSE
                            INSERT.AT.LINE = CURRENT.LINE + 1
                        END
*
                        GOSUB PUSH.HISTORY
*
                        LINE.COUNTER = 0
                        FOR I = LOAD.START TO LOAD.END
                            LINES = INSERT(LINES,INSERT.AT.LINE;LOAD.ITEM<I>)
                            INSERT.AT.LINE = INSERT.AT.LINE + 1
                            LINE.COUNTER = LINE.COUNTER + 1
                        NEXT I
*
                        PRINT LINE.COUNTER : ' lines/fields loaded.'
*
                    END ELSE
                        PRINT 'Unable to open record: ' : LOAD.RECORD.ID : ' - Press RETURN':
                    END
                END ELSE
                    PRINT 'Unable to open file: ' : LOAD.FILENAME :' - Press RETURN':
                    INPUT ANYTHING
                END
*
            CASE OCONV(VALUE,'MCU') = 'EV'
                PRINT 'Exploding line ' : CURRENT.LINE : '.'
                NEST.LEVEL = NEST.LEVEL + 1
*
                TEMP.ITEM = LINES
                CONVERT @AM:@VM:@SVM TO @VM:@SVM:@TM IN TEMP.ITEM
                ITEM.STACK<NEST.LEVEL> = TEMP.ITEM
                CURRENT.LINE.STACK<NEST.LEVEL> = CURRENT.LINE
*
                LINES = LINES<CURRENT.LINE>
                CONVERT @VM:@SVM:@TM TO @AM:@VM:@SVM IN LINES
                CURRENT.LINE = 1
*
            CASE VALUE = '^'
                IF UP.CARET.MODE THEN
                    UP.CARET.MODE = FALSE
                    PRINT 'Turned off up-arrow mode.'
                END ELSE
                    UP.CARET.MODE = TRUE
                    PRINT 'Turned on up-arrow mode.'
                END
*
            CASE OCONV(VALUE,'MCU')[1,1] = 'A'
                GOSUB PUSH.HISTORY
*
                VALUE = VALUE[2,9999]
*
                APPEND.STRING = FIELD(VALUE,' ',2)
*
                IF APPEND.STRING # '' THEN
                    APPEND.LINES = VALUE[1,INDEX(VALUE,APPEND.STRING,1)-2]
*
                    IF APPEND.LINES = '' OR NOT(NUM(APPEND.LINES)) THEN
                        APPEND.LINES = 1
                    END
*
                    IF APPEND.LINES > (TOTAL.LINES - CURRENT.LINE) THEN
                        APPEND.LINES = TOTAL.LINES - CURRENT.LINE + 1
                    END
*
                    LINES.TO.APPEND.TO = CURRENT.LINE + APPEND.LINES - 1
*
                    FOR I = CURRENT.LINE TO LINES.TO.APPEND.TO
                        LINES<I> = LINES<I> : VALUE[INDEX(VALUE,APPEND.STRING,1),9999]
                        PRINT I PADDING : ' ' : LINES<I>
                    NEXT I
                END
*
            CASE OCONV(VALUE,'MCU') = 'I'
                GOSUB PUSH.HISTORY
*
                IF TOTAL.LINES = 0 THEN
                    INSERT.AT.LINE = 1
                END ELSE
                    INSERT.AT.LINE = CURRENT.LINE + 1
                END
*
                LOOP WHILE TRUE DO
                    PRINT INSERT.AT.LINE PADDING.INSERT :
                    INPUT VALUE
*
                    IF VALUE = '' THEN
                        EXIT
                    END
*
                    FOR CHAR.CTR = 0 TO 9
                        VALUE = CHANGE(VALUE,'^00':CHAR.CTR,CHAR(CHAR.CTR))
                    NEXT CHAR.CTR
*
                    FOR CHAR.CTR = 10 TO 31
                        VALUE = CHANGE(VALUE,'^0':CHAR.CTR,CHAR(CHAR.CTR))
                    NEXT CHAR.CTR
*
                    FOR CHAR.CTR = 127 TO 254
                        VALUE = CHANGE(VALUE,'^':CHAR.CTR,CHAR(CHAR.CTR))
                    NEXT CHAR.CTR
*
                    LINES = INSERT(LINES,INSERT.AT.LINE;VALUE)
                    INSERT.AT.LINE = INSERT.AT.LINE + 1
*
                    TOTAL.LINES = DCOUNT(LINES,@AM)
                REPEAT
*
            CASE OCONV(VALUE,'MCU')[1,2] = 'DE'
                GOSUB PUSH.HISTORY
*
                NUM.DELETE.LINES = VALUE[3,9999]
*
                IF NUM.DELETE.LINES = '' OR NOT(NUM(NUM.DELETE.LINES)) THEN
                    NUM.DELETE.LINES = 1
                END
*
                IF NUM.DELETE.LINES > (TOTAL.LINES - CURRENT.LINE) THEN
                    NUM.DELETE.LINES = TOTAL.LINES - CURRENT.LINE + 1
                END
*
                FOR I = 1 TO NUM.DELETE.LINES
                    LINES = DELETE(LINES,CURRENT.LINE)
                NEXT I
*
            CASE OCONV(VALUE,'MCU') = 'T'
                PRINT 'Top.'
                CURRENT.LINE = 0
*
            CASE OCONV(VALUE,'MCU') = 'B'
                PRINT 'Bottom at line ' : TOTAL.LINES : '.'
                CURRENT.LINE = TOTAL.LINES
*
            CASE VALUE = '<'
                BLOCK.START = CURRENT.LINE
                PRINT 'Block started from line ' : CURRENT.LINE : '.'
*
            CASE VALUE = '>'
                BLOCK.END = CURRENT.LINE
                PRINT 'Block ended at line ' : CURRENT.LINE : '.'
*
            CASE OCONV(VALUE,'MCU')[1,4] = 'COPY'
                GOSUB PUSH.HISTORY
*
                POSSIBLE.BLOCK.START = FIELD(VALUE,' ',2)
                IF POSSIBLE.BLOCK.START # '' AND NUM(POSSIBLE.BLOCK.START) THEN
                    BLOCK.START = POSSIBLE.BLOCK.START
                    BLOCK.END = FIELD(VALUE,' ',3)
                END
*
                IF BLOCK.START = '' OR NOT(NUM(BLOCK.START)) THEN
                    PRINT 'Invalid block start ' : BLOCK.START : '.'
*
                END ELSE IF BLOCK.END = '' OR NOT(NUM(BLOCK.END)) THEN
                    PRINT 'Invalid block end ' : BLOCK.START : '.'
*
                END ELSE IF BLOCK.END < BLOCK.START THEN
                    PRINT 'Cannot copy from ' : BLOCK.START : ' to ' : BLOCK.END : '.'
*
                END ELSE
                    IF BLOCK.END > TOTAL.LINES THEN
                        BLOCK.END = TOTAL.LINES
                    END
*
                    INSERT.AT.LINE = CURRENT.LINE + 1
                    FOR I = BLOCK.START TO BLOCK.END
                        LINES = INSERT(LINES,INSERT.AT.LINE;LINES<I>)
                        INSERT.AT.LINE = INSERT.AT.LINE + 1
                    NEXT I
*
                    PRINT 'Copied lines from ' : BLOCK.START : ' to ' : BLOCK.END : '.'
                END
*
            CASE OCONV(VALUE,'MCU')[1,4] = 'DROP'
                GOSUB PUSH.HISTORY
*
                POSSIBLE.BLOCK.START = FIELD(VALUE,' ',2)
                IF POSSIBLE.BLOCK.START # '' AND NUM(POSSIBLE.BLOCK.START) THEN
                    BLOCK.START = POSSIBLE.BLOCK.START
                    BLOCK.END = FIELD(VALUE,' ',3)
                END
*
                IF BLOCK.START = '' OR NOT(NUM(BLOCK.START)) THEN
                    PRINT 'Invalid block start ' : BLOCK.START : '.'
*
                END ELSE IF BLOCK.END = '' OR NOT(NUM(BLOCK.END)) THEN
                    PRINT 'Invalid block end ' : BLOCK.START : '.'
*
                END ELSE IF BLOCK.END < BLOCK.START THEN
                    PRINT 'Cannot drop from ' : BLOCK.START : ' to ' : BLOCK.END : '.'
*
                END ELSE
                    IF BLOCK.END > TOTAL.LINES THEN
                        BLOCK.END = TOTAL.LINES
                    END
*
                    DELETE.AT.LINE = BLOCK.START
                    FOR I = BLOCK.START TO BLOCK.END
                        LINES = DELETE(LINES,BLOCK.START)
                    NEXT I
*
                    PRINT 'Dropped lines from ' : BLOCK.START : ' to ' : BLOCK.END : '.'
                END
*
            CASE OCONV(VALUE,'MCU')[1,1] = 'L'
                VALUE = VALUE[2,9999]
*
                POSSIBLE.NEEDLE = FIELD(VALUE,' ',2)
                IF POSSIBLE.NEEDLE # '' THEN
                    NEEDLE = POSSIBLE.NEEDLE
                END
*
                SEARCH.QUANTITY = VALUE[1,INDEX(VALUE,NEEDLE,1)-2]
*
                IF SEARCH.QUANTITY = '' OR NOT(NUM(SEARCH.QUANTITY)) THEN
                    SEARCH.QUANTITY = 1
                END
*
                IF SEARCH.QUANTITY > (TOTAL.LINES - CURRENT.LINE) THEN
                    SEARCH.QUANTITY = TOTAL.LINES - CURRENT.LINE
                END
*
                SEARCH.DONE = FALSE
                CTR = CURRENT.LINE
                SEARCHED.LINES = 0
                SEARCH.RESULTS = 0
*
                LOOP
                    CTR = CTR + 1
                    SEARCHED.LINES = SEARCHED.LINES + 1
                UNTIL SEARCH.DONE DO
                    IF INDEX(LINES<CTR>,NEEDLE,1) THEN
                        PRINT CTR PADDING : ' ' : LINES<CTR>
                        SEARCH.RESULTS = SEARCH.RESULTS + 1
                        IF SEARCH.RESULTS >= SEARCH.QUANTITY THEN
                            SEARCH.DONE = TRUE
                        END
                    END
*
                    IF SEARCHED.LINES > TOTAL.LINES THEN
                        SEARCH.DONE = TRUE
                    END
                REPEAT
*
                IF SEARCH.QUANTITY = 1 THEN
                    CURRENT.LINE = CTR - 1
                END
*
            CASE OCONV(VALUE,'MCU')[1,1] = 'P'
                NUMBER.OF.LINES = VALUE[2,9999]
                IF NUMBER.OF.LINES # '' AND NUM(NUMBER.OF.LINES) THEN
                    NUMBER.OF.LINES.TO.DISPLAY = NUMBER.OF.LINES - 1
                END ELSE
                    NUMBER.OF.LINES.TO.DISPLAY = LINES.DISPLAY
                END
                
                ENDING.LINE.NUMBER = CURRENT.LINE + NUMBER.OF.LINES.TO.DISPLAY
*
                IF ENDING.LINE.NUMBER > TOTAL.LINES THEN
                    ENDING.LINE.NUMBER = TOTAL.LINES
                END
*
                IF CURRENT.LINE = 0 THEN
                    START.POS = 1
                END ELSE
                    START.POS = CURRENT.LINE
                END
                FOR I = START.POS TO ENDING.LINE.NUMBER
                    LINE = LINES<I>
*
                    IF UP.CARET.MODE THEN
                        FOR CHAR.CTR = 0 TO 9
                            LINE = CHANGE(LINE,CHAR(CHAR.CTR),'^00':CHAR.CTR)
                        NEXT CHAR.CTR
*
                        FOR CHAR.CTR = 10 TO 31
                            LINE = CHANGE(LINE,CHAR(CHAR.CTR),'^0':CHAR.CTR)
                        NEXT CHAR.CTR
*
                        FOR CHAR.CTR = 127 TO 253
                            LINE = CHANGE(LINE,CHAR(CHAR.CTR),'^':CHAR.CTR)
                        NEXT CHAR.CTR
                    END
*
                    PRINT I PADDING : ' ' : LINE
                NEXT I
*
                CURRENT.LINE = ENDING.LINE.NUMBER
*
            CASE OCONV(VALUE,'MCU') = 'EX' OR OCONV(VALUE,'MCU') = 'Q'
                IF NEST.LEVEL # 0 THEN
                    PRINT 'Leave exploded line without saving? (y/n) ':
                    INPUT ANS
*
                    IF OCONV(ANS,'MCU') = 'Y' THEN
                        LINES = ITEM.STACK<NEST.LEVEL>
                        CONVERT @VM:@SVM:@TM TO @AM:@VM:@SVM IN LINES
                        CURRENT.LINE = CURRENT.LINE.STACK<NEST.LEVEL>
*
                        ITEM.STACK<NEST.LEVEL> = ''
                        CURRENT.LINE.STACK<NEST.LEVEL> = ''
                        NEST.LEVEL = NEST.LEVEL - 1
*
                        PRINT 'Left exploded line without saving.'
                    END
                END ELSE
                    IF LINES # ORIGINAL.LINES THEN
                        PRINT 'There are unsaved changes. Do you want to exit? (y/n) ':
                        INPUT ANS
                        IF OCONV(ANS,'MCU') = 'Y' THEN
                            PRINT 'Left record without saving.'
                            EXIT
                        END
                    END ELSE
                        EXIT
                    END
                END
*
            CASE OCONV(VALUE,'MCU') = 'FI'
                IF NEST.LEVEL # 0 THEN
                    ROW = LINES
                    CONVERT @AM:@VM:@SVM TO @VM:@SVM:@TM IN ROW
*
                    LINES = ITEM.STACK<NEST.LEVEL>
                    CONVERT @VM:@SVM:@TM TO @AM:@VM:@SVM IN LINES
*
                    CURRENT.LINE = CURRENT.LINE.STACK<NEST.LEVEL>
                    LINES<CURRENT.LINE> = ROW
*
                    ITEM.STACK<NEST.LEVEL> = ''
                    CURRENT.LINE.STACK<NEST.LEVEL> = ''
                    NEST.LEVEL = NEST.LEVEL - 1
*
                    PRINT 'Saved exploded line and left explosion.'
*
                END ELSE
                    WRITE LINES ON FILE,RECORD.ID
                    PRINT 'Saved ' : RECORD.ID : '.'
                    EXIT
                END
*
            CASE OCONV(VALUE,'MCU') = 'FD'
                PRINT 'You are trying to delete the entire record. Are you sure? (y/n) ' :
                INPUT ANS
                IF ANS = 'Y' THEN
                    DELETE FILE,RECORD.ID
                    PRINT 'Record was deleted.'
                    EXIT
                END
                PRINT 'Record was not deleted.'
*
            CASE OCONV(VALUE,'MCU')[1,4] = 'SAVE'
                IF NEST.LEVEL # 0 THEN
                    PRINT 'Exit the explosion before saving.'
*
                END ELSE
                    NUMBER.OF.ARGUMENTS = DCOUNT(VALUE,' ')
*
                    IF NUMBER.OF.ARGUMENTS = 2 THEN
                        SAVE.FILENAME = FILENAME
                        SAVE.RECORD.ID = FIELD(VALUE,' ',2)
*
                    END ELSE IF NUMBER.OF.ARGUMENTS = 3 THEN
                        SAVE.FILENAME = FIELD(VALUE,' ',2)
                        SAVE.RECORD.ID = FIELD(VALUE,' ',3)
                    END
*
                    OPEN '',SAVE.FILENAME TO SAVE.FILE THEN
                        READU SAVE.ITEM FROM SAVE.FILE,SAVE.RECORD.ID LOCKED
                            PRINT 'Unabled to save ' : SAVE.RECORD.ID : ', item is locked.'
*
                        END THEN
                            PRINT 'Are you sure you want to overwrite ' : SAVE.RECORD.ID '? (y/n)' :
                            INPUT ANS
                            IF ANS = 'Y' THEN
                                WRITE LINES ON SAVE.FILE,SAVE.RECORD.ID
                                PRINT 'Saved ' : SAVE.RECORD.ID : ' in ' : SAVE.FILENAME : '.'
                            END
                        END ELSE
                            WRITE LINES ON SAVE.FILE,SAVE.RECORD.ID
                            PRINT 'Saved ' : SAVE.RECORD.ID : ' in ' : SAVE.FILENAME : '.'
                        END
                    END ELSE
                        PRINT 'Unable to open file ' : SAVE.FILENAME : ' for saving.'
                    END
                END
*
            CASE OCONV(VALUE,'MCU') = 'OOPS' OR OCONV(VALUE,'MCU') = 'UNDO'
                IF HISTORY.POS = 1 THEN
                    PRINT 'Already on the earliest change.'
*
                END ELSE
                    IF HISTORY.POS-1 >= DCOUNT(HISTORY,@AM) THEN
                        TEMP.ITEM = LINES
                        CONVERT @AM:@VM:@SVM TO @VM:@SVM:@TM IN TEMP.ITEM
                        HISTORY<HISTORY.POS> = TEMP.ITEM
                    END
*
                    HISTORY.POS = HISTORY.POS - 1
*
                    TEMP.ITEM = HISTORY<HISTORY.POS>
                    CONVERT @VM:@SVM:@TM TO @AM:@VM:@SVM IN TEMP.ITEM
                    LINES = TEMP.ITEM
*
                    PRINT 'Undo: ' : HISTORY.COMMENTS<HISTORY.POS>
                    PRINT 'Rolled back 1 change. (' : HISTORY.POS : '/' : DCOUNT(HISTORY,@AM) : ')'
                END
*
            CASE OCONV(VALUE,'MCU') = 'REDO'
                IF HISTORY.POS >= DCOUNT(HISTORY,@AM) THEN
                    PRINT 'Already at the latest change.'
*
                END ELSE
                    HISTORY.POS = HISTORY.POS + 1
*
                    TEMP.ITEM = HISTORY<HISTORY.POS>
                    CONVERT @VM:@SVM:@TM TO @AM:@VM:@SVM IN TEMP.ITEM
                    LINES = TEMP.ITEM
*
                    PRINT 'Redo: ' : HISTORY.COMMENTS<HISTORY.POS-1>
                    PRINT 'Rolled forward 1 change. (' : HISTORY.POS : '/' : DCOUNT(HISTORY,@AM) : ')'
                END
*
            CASE OCONV(VALUE,'MCU') = 'H'
                PRINT 'History: '
                FOR I = 1 TO DCOUNT(HISTORY.COMMENTS,@AM)
                    IF HISTORY.POS-1 = I THEN
                        PRINT I PADDING : ' -> ' : HISTORY.COMMENTS<I>
                    END ELSE
                        PRINT I PADDING : ' ' : HISTORY.COMMENTS<I>
                    END
                NEXT I
*
            CASE OCONV(VALUE,'MCU')[1,2] = 'R '
                GOSUB PUSH.HISTORY
*
                LINES<CURRENT.LINE> = VALUE[3,9999]
                PRINT CURRENT.LINE PADDING : ' ' : LINES<CURRENT.LINE>
*
            CASE OCONV(VALUE,'MCU')[1,1] = 'R'
                GOSUB PUSH.HISTORY
*
                DELIMITER = VALUE[2,1]
                NEEDLE = FIELD(VALUE,DELIMITER,2)
                NEW.VALUE = FIELD(VALUE,DELIMITER,3)
                OCCURANCES = FIELD(VALUE,DELIMITER,4)
*
                IF OCCURANCES # '' AND NUM(OCCURANCES) THEN
                    NULL
                END ELSE IF OCONV(OCCURANCES,'MCU') = 'G' THEN
                    OCCURANCES = 0
                END ELSE
                    OCCURANCES = 1
                END
*
                IF NEEDLE = '' THEN
                    LINES<CURRENT.LINE> = NEW.VALUE : LINES<CURRENT.LINE>
                END ELSE
                    LINES<CURRENT.LINE> = CHANGE(LINES<CURRENT.LINE>,NEEDLE,NEW.VALUE,OCCURANCES)
                END
                PRINT CURRENT.LINE PADDING : ' ' : LINES<CURRENT.LINE>
*
            CASE TRUE
                NULL
*
        END CASE
    REPEAT
*
    RELEASE FILE,RECORD.ID
*
    STOP
*
*********************  S U B R O U T I N E  *********************
*
    PUSH.HISTORY:NULL
*
    IF NEST.LEVEL = 0 THEN
        FOR HIST.CTR = HISTORY.POS TO DCOUNT(HISTORY,@AM)
            HISTORY = DELETE(HISTORY,HIST.CTR)
            HISTORY.COMMENTS = DELETE(HISTORY.COMMENTS,HIST.CTR)
        NEXT HIST.CTR
        TEMP.ITEM = LINES
        CONVERT @AM:@VM:@SVM TO @VM:@SVM:@TM IN TEMP.ITEM
        HISTORY<HISTORY.POS> = TEMP.ITEM
        HISTORY.COMMENTS<HISTORY.POS> =  VALUE
        HISTORY.POS = HISTORY.POS + 1
    END
*
    RETURN
*
    
*********************  S U B R O U T I N E  *********************
*
    FORMAT.FILE:NULL
*
    GOSUB PUSH.HISTORY
*
    FIRST.WORDS.INC = 'FOR,CASE,$IFDEF'
    CONVERT ',' TO @AM IN FIRST.WORDS.INC
*
    LAST.WORDS.INC = 'THEN,ELSE,LOCKED,DO,LOOP'
    CONVERT ',' TO @AM IN LAST.WORDS.INC
*
    FIRST.WORDS.DEC = 'END,WHILE,UNTIL,REPEAT,CASE,NEXT,$ENDIF'
    CONVERT ',' TO @AM IN FIRST.WORDS.DEC
*
    FMT.LINES = ''
    INDENT.LEVEL = 1
*
    NUMBER.OF.LINES = DCOUNT(LINES,@AM)
*
    FOR FMT.CTR = 1 TO NUMBER.OF.LINES
        TRIMMED.LINE = TRIMB(TRIMF(LINES<FMT.CTR>))
*
        IF TRIMMED.LINE[1,1] = '*' THEN
            FMT.LINES<FMT.CTR> = TRIMMED.LINE
            CONTINUE
        END
*
        FIRST.WORD = FIELD(TRIMMED.LINE,' ',1)
        LAST.WORD = FIELD(TRIMMED.LINE,' ',DCOUNT(TRIMMED.LINE,' '))
*
        IF TRIMMED.LINE = 'END CASE' THEN
            INDENT.LEVEL = INDENT.LEVEL - 2
            IF INDENT.LEVEL = 0 THEN INDENT.LEVEL = 1
*
        END ELSE
            LOCATE(FIRST.WORD,FIRST.WORDS.DEC;LAST.ANYPOS) THEN
                INDENT.LEVEL = INDENT.LEVEL - 1
                IF INDENT.LEVEL = 0 THEN INDENT.LEVEL = 1
            END
        END
*
        FMT.LINE = SPACE(INDENT.LEVEL * TAB.SIZE) : TRIMMED.LINE
        FMT.LINES<FMT.CTR> = FMT.LINE
*
        LOCATE(LAST.WORD,LAST.WORDS.INC;LAST.ANYPOS) THEN
            LOCATE(FIRST.WORD,FIRST.WORDS.INC;ANYPOS) ELSE
                INDENT.LEVEL = INDENT.LEVEL + 1
            END
        END
*
        LOCATE(FIRST.WORD,FIRST.WORDS.INC;ANYPOS) THEN
            INDENT.LEVEL = INDENT.LEVEL + 1
        END
*
        IF TRIMMED.LINE = 'BEGIN CASE' THEN
            INDENT.LEVEL = INDENT.LEVEL + 2
        END
    NEXT FMT.CTR
*
    LINES = FMT.LINES
*
    RETURN
*
* END OF PROGRAM.
*
    END
*
